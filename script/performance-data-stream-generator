#!/usr/bin/env ruby

require_relative '../../../config/boot'
require 'optparse'
require 'ffi-rzmq'
require_relative '../lib/logjam/eventmachine'
require 'oj'
require 'active_support'
require 'uuid4r'

options = {:app => "logjam", :env => "development", :keys => %w{all_pages logjam}}

OptionParser.new do |opt|
  opt.on("-a", "--app [APP]", "Name of the app") { |a| options[:app] = a }
  opt.on("-e", "--env [ENV]", "Name of the environment") { |e| options[:env] = e }
  opt.on("-k", "--keys [K1,K2,K3]", Array, "List of keys to generate data for") { |k| options[:keys] = k }
  opt.on("-v", "--verbose", "Be verbose") { |v| options[:verbose] = v }
  opt.parse!
end

FIELDS = %w(gc_time other_time memcache_time gearman_time search_time api_time db_time view_time total_time)

app  = options[:app]
env  = options[:env]
keys = options[:keys]

context = ZMQ::Context.new(1)
pub_socket = context.socket(ZMQ::PUB)
pub_socket.setsockopt(ZMQ::SNDHWM, 1000)
pub_socket.setsockopt(ZMQ::LINGER, 100)
pub_socket.bind("tcp://127.0.0.1:9607")

opad_socket = context.socket(ZMQ::PUB)
opad_socket.setsockopt(ZMQ::SNDHWM, 1000)
opad_socket.setsockopt(ZMQ::LINGER, 100)
opad_socket.bind("tcp://127.0.0.1:9610")

EM.run do

  trap("INT"){ EM.stop }

  EM.add_periodic_timer(1) do
    keys.each do |key|
      count = 50+450*rand()
      data = FIELDS.inject({"count" => count}){|h,k| h[k] = 100*rand*count; h}
      encoded_data = Oj.dump(data, :mode => :compat)
      # publish performance data
      msg = ["#{app}-#{env},#{key}", encoded_data]
      pub_socket.send_strings msg, ZMQ::DONTWAIT
      puts "KEY: #{key} DATA: #{encoded_data}" if options[:verbose]
    end
  end
  error_count = 0
  EM.add_periodic_timer(2) do
    keys.each do |key|
      errors =
        [
         {
           "severity" => 2 + rand(2),
           "time" => Time.now.utc.iso8601,
           "action" => "ApplicationController#index",
           "description" => "Something broke #{error_count+=1}",
           "request_id" => UUID4R::uuid(1).gsub('-','')
         }
        ]
      encoded_errors = Oj.dump(errors, :mode => :compat)
      # publish error data
      msg = ["#{app}-#{env},#{key}", encoded_errors]
      pub_socket.send_strings msg, ZMQ::DONTWAIT
      puts "KEY: #{key} ERROR: #{encoded_errors}" if options[:verbose]
    end
  end
  EM.add_periodic_timer(5) do
    keys.each do |key|
      score = rand
      anomaly_data = {anomaly: score > 0.5, score: score}
      encoded_anomaly_data = Oj.dump(anomaly_data, :mode => :compat)
      # publish anomaly data
      msg = ["#{app}-#{env},#{key}", encoded_anomaly_data]
      opad_socket.send_strings msg, ZMQ::DONTWAIT
      puts "KEY: #{key} ANOMALY: #{encoded_anomaly_data}" if options[:verbose]
    end
  end
end

pub_socket.close
opad_socket.close
context.terminate


<%= render "header" %>
<style>
#request-history {
  clear: both;
  margin-top:  10px;
  margin-left: 50px;
}
#request-history div {
  font: 10px sans-serif;
}
.title {
  font: 14px san-serif;
}
.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}
.weekday {
  fill: steelblue;
}
.weekend {
  fill: #90B4D2;
}
.x.axis path {
  // display: none;
}
#spinner {
    font: 20px sans-serif;
    margin: 20px;
}
#perf-title {
    font: 20px sans-serif;
    font-weight: bold;
    margin-left: 400px;
    margin-top: 10px;
}
</style>

<div id="perf-title">Performance History</div>

<div id="show-json"><%= link_to("show json", params.merge(:format => :json)) %></div>

<p id="spinner">Please stand by while we fetch your data ...
<%= image_tag("spinner24.gif") %>
</p>

<div id="request-history">
  <div id="apdex_score"></div>
  <div id="total_time"></div>
  <div id="request_count"></div>
  <div id="errors"></div>
  <div id="warnings"></div>
  <div id="exceptions"></div>
  <div id="time"></div>
  <div id="calls"></div>
  <div id="memory"></div>
  <div id="heap"></div>
</div>

<script type="text/javascript">
function bar_class(date) {
  var day = date.getDay();
  if (day == 0 || day == 6)
    return "bar weekend";
  else
    return "bar weekday";
}

function bar_chart(data, metric, format) {

var margin = {top: 20, right: 20, bottom: 50, left: 100},
    width = 960 - margin.left - margin.right,
    height = 150 - margin.top - margin.bottom,

    data_min = d3.min(data, function(d){return d[metric]}),
    data_max = d3.max(data, function(d){return d[metric]});

var formatter = d3.format(format);

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(5)
    .tickFormat(formatter);

var svg = d3.select("#request-history #" + metric).append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  x.domain([data[0].date, data[data.length-1].date]);
  y.domain([data_min, data_max]).nice();

svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "title")
      // .attr("transform", "rotate(-90)")
      .attr("y", -20)
      .attr("x", 1)
      .attr("dy", ".71em")
      .style("text-anchor", "begin")
      .text(metric.replace(/_/g,' '));

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", function(d) { return bar_class(d.date); })
      .attr("x", function(d) { return x(d.date); })
      .attr("width", width/data.length)
      .attr("y", function(d) { return y(d[metric]); })
      .attr("height", function(d) { return height - y(d[metric]); })
      .attr("cursor", "pointer")
      .on("click", function(d) { view_date(d.date); });
};

$.getJSON("<%= url_for(params.merge(:format => :json)) %>", function(response){
  response.data.forEach(function(d){d.date = new Date(d.date);})
  bar_chart(response.data, "apdex_score", ".3r");
  bar_chart(response.data, "request_count", ",.0");
  bar_chart(response.data, "total_time", ".0");
  bar_chart(response.data, "errors", ",.0");
  bar_chart(response.data, "warnings", ",.0");
  bar_chart(response.data, "exceptions", ",.0");
  for (g in response.resources) {
    response.resources[g].forEach(function(m){
       if (m != "total_time") {
         $("#" + g).append("<div id='" + m + "'></div>");
         bar_chart(response.data, m, ",.0");
       }
    });
  }
  $("#spinner").hide();
});

</script>

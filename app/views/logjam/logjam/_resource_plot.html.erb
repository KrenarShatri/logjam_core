<div id='resource-plot'>
  <script type="text/javascript+protovis">
(function() {

var data = <%= @protovis_data.to_json %>;
var interval = <%= params[:interval].to_i %>;
var colors = <%= ((@resources.reverse+[@gc_time&&"gc_time"]).compact.map{|r| Logjam::Resource.color(r,0.8)}+["rgba(128,128,128,0.2)"]).to_json %>;
var legend = <%= ((@resources.reverse+[@gc_time&&"gc_time"]+%w(requests/second)).compact).to_json.gsub(/_/,' ') %>;
var request_counts = <%= @request_counts.to_json %>;
var gc_time = <%= @gc_time ? @gc_time.to_json : "null" %>;
var max_y = <%= @protovis_max %>;
var zoomed_max_y = <%= @protovis_avg * 1.5 %>;
var selected_slice = <%= params[:start_minute].to_i %>;
var selected_slice_width = <%= params[:end_minute].to_i - params[:start_minute].to_i + 1 %>

/* Sizing and scales. */
var w = <%= width %>,
    h = <%= height %>,
    x = pv.Scale.linear(0, 1440/interval-1).range(0, w),
    y = pv.Scale.linear(0, max_y).range(0, h).nice(),
    y2 = pv.Scale.linear(0, pv.max(request_counts)).range(0, 50).nice(),
    color_map = pv.colors(colors),
    c = color_map.range();

/* The root panel. */
var vis = new pv.Panel()
    .strokeStyle("#999")
    .width(w)
    .height(h)
    .bottom(65)
    .left(40)
    .right(0)
    .top(10)
    .title("click to toggle zoom mode")
    .events("all")
    .event("click", update_y_scale);

/* X-label. */
vis.add(pv.Label)
    .left(w/2)
    .bottom(-20)
    .font("12px sans-serif")
    .textStyle("#999")
    .textAlign("center")
    .textBaseline("middle")
    .text("Time of day");

/* X-axis and ticks. */
vis.add(pv.Rule)
    .data(pv.range(24).map(function(h) h/interval*60))
    .left(x)
    .bottom(0)
    .visible(function(d) d)
    .strokeStyle(function(d) d ? "rgba(128,128,128,.2)" : "#999")
  .anchor("bottom").add(pv.Label)
    .text(function(t) t*interval/60);

/* Y-label */
vis.add(pv.Label)
    .left(-30)
    .bottom(h/2)
    .font("12px sans-serif")
    .textStyle("#999")
    .textAlign("center")
    .textBaseline("middle")
    .textAngle(-Math.PI / 2)
    .text("<%= h @dataset.ylabel %>");

/* Y-axis and ticks. */
vis.add(pv.Rule)
    .data(function() y.ticks(10))
    .bottom(function(d) y(d))
    .strokeStyle(function(d) d ? "rgba(128,128,128,.2)" : "#999")
  .anchor("left").add(pv.Label)
    .text(y.tickFormat);

/* Legend. */
vis.add(pv.Dot)
    .data(legend)
    .left(function() 10+(120*(Math.floor(this.index/2))))
    .bottom(function() -40-14*(this.index%2))
    .lineWidth(1)
    .size(16)
    .strokeStyle(color_map)
    .fillStyle(color_map)
    .add(pv.Label)
       .textBaseline("middle")
       .textMargin(7)
       .text(function() legend[this.index]);

function submit_minutes(start, end) {
   jQuery('#start-minute').val(""+start);
   jQuery('#end-minute').val(""+end);
   jQuery('#grouping option:selected').val("request");
   jQuery('#filter-form').submit();
}

function restrict_minutes(p){
   start = Math.floor(x.invert(p.x))*interval-3;
   end = start+interval;
   submit_minutes(start, end);
}

function reset_minutes(){
   submit_minutes(0,1440);
}

/* Request counts. */
vis.add(pv.Panel)
    .cursor("pointer")
    .events("all")
    .event("click", reset_minutes)
    .title("click to reset time interval")
    .bottom(h-50)
    .add(pv.Area)
      .cursor("pointer")
      .event("click", function() restrict_minutes(this.mouse()))
      .data(request_counts)
      .left(function() x(this.index))
      .bottom(0)
      .height(function(d) y2(d))
      .interpolate("cardinal")
      .fillStyle("rgba(128,128,128,0.2)")
      .strokeStyle("rgba(128,128,128,0.2)")
      .title("requests/second (click to select time interval)")
    .parent.add(pv.Bar)
      .bottom(0)
      .left(x(selected_slice/interval))
      .width(selected_slice_width)
      .visible(selected_slice>0)
      .title("selected time interval")
      .fillStyle("rgba(255,0,0,0.3)")
;

var request_count_formatter = pv.Format.number().fractionDigits(0,1);

vis.add(pv.Label)
    .data([0,25,50])
    .bottom(function() 1+h-50+this.index*25)
    .right(0)
    .text(function(d) request_count_formatter.format(y2.invert(d)))
    .textMargin(0)
    .textAlign("right")
    .textBaseline("bottom")
;

/* The stack layout. */
vis.add(pv.Layout.Stack)
    .layers(data)
    .x(function(d) x(d[0]))
    .y(function(d) y(d[1]))
  .layer.add(pv.Area)
    .cursor("pointer")
    .event("click", function() restrict_minutes(this.mouse()))
    .interpolate("step-after")
    .fillStyle(function(d) c[this.parent.index])
    .title(function(d) legend[this.parent.index] + " (click to select time interval)");

/* GC time */
if (gc_time != null) {
  vis.add(pv.Line)
    .data(gc_time)
    .left(function(d) x(d[0]))
    .bottom(function(d) y(d[1]))
    .interpolate("cardinal")
    .strokeStyle("rgba(0,0,0,.9)");
}

var zoomed = false;
function update_y_scale() {
  var new_max_y = zoomed ? max_y : zoomed_max_y;
  zoomed = !zoomed;
  y.domain(0, new_max_y);
  y.nice();
  vis.render();
}

vis.render();

})();
</script>
  </div>

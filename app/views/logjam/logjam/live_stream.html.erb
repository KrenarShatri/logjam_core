<h2 id="stream-title">Live Performance Data Stream for <%= @app %>-<%= @env %>
  <input id="stream-toggle" type="button" onclick="toggle_stream(this);" value="pause" />
</h2>
<div id="live-stream">
  <script type="text/javascript" src="/javascripts/protovis-r3.2.js"></script>
  <script type="text/javascript+protovis">

<% color_list = @resources.reverse.map{|r| Logjam::Resource.color(r,0.7)}+["rgba(128,128,128,0.3)"] %>
var resources = <%= @resources.reverse.to_json %>;
var colors = <%= color_list.to_json %>;
var connection_status = "disconnected";
var legend = <%= (@resources.reverse+%w(requests/second)).to_json.gsub(/_/,' ') %>;

/* Sizing and scales. */
var w = 600,
    h = 300,
    slice = 10,
    x = pv.Scale.linear(0, w).range(0, w),
    y = pv.Scale.linear(0, 0).range(0, h).nice(),
    y2 = pv.Scale.linear(0, 0).range(0, 50).nice(),
    color_map = pv.colors(colors);
    c = color_map.range();

/* Data */
function zeros(){ return pv.range(w/slice+1).map(function()0); }
var data = pv.range(resources.length).map(zeros);
var request_counts = zeros();

/* The root panel. */
var vis = new pv.Panel()
    .strokeStyle("#999")
    .right(30)
    .left(30)
    .top(5)
    .bottom(50)
    .width(w)
    .height(h);

/* Connection status. */
vis.add(pv.Label)
    .top(2)
    .left(2)
    .font("14px sans-serif")
    .textStyle("rgba(123,128,128,.5)")
    .textAlign("left")
    .textBaseline("top")
    .text(function() connection_status);

/* X-axis and ticks. */
vis.add(pv.Rule)
    .data(x.ticks(w/slice))
    .left(x)
    .bottom(0)
    .strokeStyle(function(d) d ? "rgba(128,128,128,.2)" : "#999")
  .anchor("bottom").add(pv.Label)
    .visible(function(d) d && ((d/slice)%10==0))
    .text(function(d) "t-"+ x.tickFormat(d/slice-60));

/* Y-axis and ticks. */
vis.add(pv.Rule)
    .data(function() y.ticks(10))
    .bottom(function(d) y(d))
    .strokeStyle(function(d) d ? "rgba(128,128,128,.2)" : "#999")
  .anchor("left").add(pv.Label)
    .text(y.tickFormat);

/* The stack layout. */
vis.add(pv.Layout.Stack)
    .layers(data)
    .x(function() this.index*slice)
    .y(function(d) y(d))
  .layer.add(pv.Area)
    .interpolate("cardinal")
    .fillStyle(function(d) c[this.parent.index])
    .strokeStyle(function(d) c[this.parent.index].darker(0.1))
;

/* Request counts. */
vis.add(pv.Area)
    .data(request_counts)
    .left(function() this.index*slice)
    .bottom(h-50)
    .height(function(d) y2(d))
    .interpolate("cardinal")
    .fillStyle("rgba(128,128,128,0.3)")
    .strokeStyle("rgba(128,128,128,0.3)");

vis.add(pv.Label)
    .data([0,25,50])
    .bottom(function() h-50+this.index*25)
    .right(0)
    .text(function(d) y2.invert(d))
    .textAlign("left")
    .textBaseline("middle")
;

/* Legend. */
vis.add(pv.Dot)
    .data(legend)
    .left(function() 10+(100*(Math.floor(this.index/2))))
    .bottom(function() -20-14*(this.index%2))
    .lineWidth(1)
    .size(16)
    .strokeStyle(color_map)
    .fillStyle(color_map)
    .add(pv.Label)
       .textBaseline("middle")
       .textMargin(7)
       .text(function() legend[this.index]);

/* recompute the Y-scale. */
function re_scale() {
  var max_y = 0;
  var num_areas = data.length;
  var num_slots = data[0].length;
  for (var i = 0; i < num_slots; ++i) {
    sum_slot = 0;
    for (var j = 0; j < num_areas; ++j) sum_slot += data[j][i];
    if (sum_slot > max_y) max_y = sum_slot;
  };
  y = pv.Scale.linear(0, max_y).range(0, h).nice();
  y2 = pv.Scale.linear(0, pv.max(request_counts)).range(0, 50).nice();
};

/* add stream data to the chart */
function update_chart(values) {
  var count = values["count"];
  request_counts.push(count);
  request_counts.shift();
  for (var i = 0, len = resources.length; i < len; ++i) {
    var val = values[resources[i]];
    if (count == 0 || val == null)
      val = 0;
    else
      val /= count;
    data[i].push(val);
    data[i].shift();
  };
  re_scale();
  vis.render();
};

/* The web socket */
var ws = null;

/* connect to the data stream */
function connect_chart() {
  if ( ws == null ) {
    ws = new WebSocket("<%= @socket_url %>");
    ws.onmessage = function(evt) { update_chart(JSON.parse(evt.data)); };
    ws.onclose = function() { connection_status = "disconnected"; vis.render(); };
    ws.onopen = function() { connection_status = "connected"; vis.render(); ws.send('<%= "#{@app}-#{@env}" %>'); };
    ws.onerror = function() { alert("websocket error"); }
  }
};

/* disconnect from the data stream */
function disconnect_chart() {
  ws.close();
  ws = null;
}

/* toggle stream conection */
function toggle_stream(button) {
  if (button.value == "resume") {
    connect_chart();
    button.value = "pause";
  } else {
    disconnect_chart();
    button.value = "resume";
  }
}

/* intial draw */
re_scale();
vis.render();

/* automatically connect to the data stream when the ducoment is ready */
jQuery(document).ready(connect_chart);

  </script>
</div>

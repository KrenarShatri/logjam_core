<div id='resource-plot'>

<style type="text/css">
.xlabel, .ylabel, .legend, .label, .rlabel {
  font: "8px sans-serif";
  stroke: none;
  fill: #000;
  stroke-width: 0.5;
  shape-rendering: crispEdges;
}
</style>

<script type="text/javascript">
(function() {

var data = <%= raw @protovis_data.inspect.gsub(' ','') %>;
var interval = <%= params[:interval].to_i %>;
var colors = <%= raw ((@resources.reverse+[@gc_time&&"gc_time"]).compact.map{|r| Logjam::Resource.color(r,0.8)}+["rgba(128,128,128,0.2)"]).to_json %>;
var legend = <%= raw ((@resources.reverse+[@gc_time&&"gc_time"]+%w(requests/second)).compact).to_json.gsub(/_/,' ') %>;
var request_counts = <%= raw @request_counts.reverse.drop_while{|d|d==0}.reverse.inspect.gsub(' ','') %>;
var gc_time = <%= @gc_time ? @gc_time.reverse.drop_while{|_,d| d==0}.reverse.inspect.gsub(' ','') : "null" %>;
var max_y = <%= @protovis_max %>;
var zoomed_max_y = <%= @protovis_zoom * 1.5 %>;
var selected_slice = <%= params[:start_minute].to_i %>;
var selected_slice_width = <%= params[:end_minute].to_i - params[:start_minute].to_i + 1 %>;

/* Animation */
var zoom_interval = 1;

/* Sizing and scales. */
var w = <%= width %>,
    h = <%= height %>,
    x = d3.scale.linear().domain([0, 1440/interval]).range([0, w]),
    xticks = d3.range(25).map(function(h){ return h/interval*60; }),
    y = d3.scale.linear().domain([0, zoomed_max_y]).range([h, 0]).nice(),
    y2 = d3.scale.linear().domain([0, d3.max(request_counts)]).range([50,0]).nice();


function submit_minutes(start, end, resource) {
   jQuery('#start-minute').val(""+start);
   jQuery('#end-minute').val(""+end);
   jQuery('#grouping option:selected').val("request");
   submit_resource(resource);
}

function submit_resource(resource) {
   if (d3.event) {
     d3.event.preventDefault();
     d3.event.stopPropagation();
   }
   if (resource != "requests/second") {
     jQuery('#resource option:selected').val(resource.replace(/ /g,'_'));
     jQuery('#filter-form').submit();
   }
}

function restrict_minutes(p, resource){
   start = Math.floor(x.invert(p[0]))*interval-1;
   end = start+interval+1;
   submit_minutes(start, end, resource);
}

function reset_minutes(){
   submit_minutes(0, 1440, jQuery('#resource option:selected').val());
}


/* The root panel. */
var vis = d3.select("#resource-plot")
    .append("svg")
     .attr("width", w+50)
     .attr("height", h+100)
     .style("stroke", "#999")
     .style("strokeWidth", 1.0)
     .on("click", update_y_scale)
     .append("g")
       .attr("transform", "translate(40,10)")
       .attr("title", "click to toggle zoom mode");

/* X-label */
vis.append("svg:text")
    .attr("class", "label")
    .attr("dy", h+30)
    .attr("dx", w/2)
    .style("font", "12px sans-serif")
    .attr("text-anchor", "middle")
    .text("Time of day");

/* X-axis and ticks. */
vis.selectAll(".yrule")
  .data(xticks)
  .enter()
    .append("line")
    .attr("class", "yrule")
    .style("stroke", function(d, i){ return (i%24)==0 ? "#999" : "rgba(128,128,128,.2)" })
    .style("sroke-width", function(d, i){ return (i%24)==0 ? 2 : 1; })
    .attr("x1", x)
    .attr("y1", 0)
    .attr("x2", x)
    .attr("y2", h);


<% if @dataset.plot_kind == :memory %>
function y_ticks_formatter(d){
  return d3.format(".0f")(d/1000) + "k";
}
<% else %>
var y_ticks_formatter = d3.format(".0f");
<% end %>

vis.selectAll(".xlabel")
      .data(xticks)
    .enter().append("text")
      .attr("class", "xlabel")
      .attr("x", x)
      .attr("y", h)
      .attr("dx", 0)
      .attr("dy", 12)
      .attr("text-anchor", "middle")
      .style("font", "8px sans-serif")
      .text(function(d){return (d*interval)/60;});

/* Y-label */
vis.append("svg:text")
    .attr("class", "label")
    .attr("dy", -25)
    .attr("dx", -w/2+140)
    .style("font", "12px sans-serif")
    .attr("text-anchor", "middle")
    .attr("transform", "rotate(270)")
    .text("<%= @dataset.ylabel %>");

/* Y-axis and ticks. */

function draw_grid() {
  vgrid = vis.selectAll(".xrule").data(y.ticks(10));
  vgrid.enter()
   .append("line")
   .attr("class", "xrule")
   .style("stroke", function(d, i){ return (i==0) ? "#999" : "rgba(128,128,128,.2)" })
   .attr("y1", y)
   .attr("x1", 0)
   .attr("y2", y)
   .attr("x2", w);
  vgrid.exit().remove();

  vlabels = vis.selectAll(".ylabel").data(y.ticks(10));
  vlabels.enter().append("text")
    .attr("class", "ylabel")
    .attr("x", 0)
    .attr("y", y)
    .attr("dx", -10)
    .attr("dy", 3)
    .attr("text-anchor", "middle")
    .style("font", "8px sans-serif")
    .text(y_ticks_formatter);
  vlabels.exit().remove();

  vgrid.transition()
    .duration(zoom_interval)
    .attr("y1", y)
    .attr("y2", y);

  vlabels.transition()
    .duration(zoom_interval)
    .attr("y", y)
    .text(y_ticks_formatter);
}

draw_grid();

/* Legend. */
vis.selectAll(".legend")
    .data(legend)
  .enter().append("svg:text")
    .attr("class", "legend")
    .attr("x", function(d,i){return 10+(120*(Math.floor(i/2)))})
    .attr("y", function(d,i){return h+50+14*(i%2)})
    .on("click", function(d,i){ submit_resource(legend[i]) })
    .style("font", "10px sans-serif")
    .style("cursor", "pointer")
    .text(String);

vis.selectAll(".legendmark")
    .data(legend)
  .enter().append("svg:circle")
    .attr("class", "legendmark")
    .attr("transform", "translate(-7,-3)")
    .attr("cx", function(d,i){return 10+(120*(Math.floor(i/2)))})
    .attr("cy", function(d,i){return h+50+14*(i%2)})
    .attr("r", 4)
    .on("click", function(d,i){ submit_resource(legend[i]) })
    .style("cursor", "pointer")
    .style("stroke", function(d,i){ return colors[i]; })
    .style("fill", function(d,i){ return colors[i]; });

var request_count_formatter = d3.format(",.0f");

vis.selectAll(".rlabel")
    .data([50,25,0])
    .enter()
    .append("text")
    .attr("class", "rlabel")
    .style("font", "10px sans-serif")
    .attr("text-anchor", "end")
    .attr("y", function(d,i){ return 50-i*25-1 })
    .attr("x", w-1)
    .text(function(d){ return request_count_formatter(y2.invert(d)); });


var request_area = d3.svg.area()
     .interpolate("cardinal")
     .x(function(d) { return x(d.x+0.5); })
     .y0(function(d) { return y2(d.y0); })
     .y1(function(d) { return y2(d.y + d.y0); });

var request_data = request_counts.map(function(d,i){ return {x:i, y:d, y0:0};});

vis.append("rect")
    .style("cursor", "pointer")
    .on("click", reset_minutes)
    .attr("y", 0)
    .attr("x", 0)
    .attr("width", w)
    .attr("height", 50)
    .style("stroke", "none")
    .style("fill", "rgba(128,128,128,.05)");

/* top x axis */
vis.append("line")
    .attr("y1", 0)
    .attr("x1", 0)
    .attr("y2", 0)
    .attr("x2", w)
    .style("stroke", "#999")
    .style("fill", "none");

vis.selectAll(".request_count")
     .data([request_data])
     .enter().append("path")
     .attr("class", "request_count")
     .style("fill", "rgba(128,128,128,0.2)")
     .style("cursor", "pointer")
     .on("click", function(d,i){ restrict_minutes(d3.svg.mouse(this), jQuery('#resource option:selected').val())})
     .style("stroke", "rgba(128,128,128,0.3)")
     .style("stroke-width", 1)
     .attr("d", request_area);

vis.append("rect")
      .attr("y", 0)
      .attr("x", x(selected_slice/interval))
      .attr("width", selected_slice_width)
      .attr("height", 50)
      .attr("display", function(){ return selected_slice>0 ? null : "none"; })
      .style("stroke", "none")
      .style("fill", "rgba(255,0,0,0.3)");

var area = d3.svg.area()
     .interpolate("step-after")
     .x(function(d) { return x(d.x+.5); })
     .y0(function(d) { return y(d.y0+.5); })
     .y1(function(d) { return y(d.y+d.y0+.5); });

function oj(a) {
  return a.map(function(d){
    return d.map(function(d){ return {x:d[0], y:d[1], y0:0}; })
  })
};

var odata = oj(data);

var ldata = d3.layout.stack()(odata);

/* The stack layout. */
vis.selectAll(".layer")
     .data(ldata)
     .enter().append("path")
     .attr("class", "layer")
     .style("fill", function(d,i) { return colors[i]; })
     .style("cursor", "pointer")
     .on("click", function(d,i){ restrict_minutes(d3.svg.mouse(this), legend[i]); })
     .style("stroke", "none")
     .attr("d", area);

/* GC time */
if (gc_time != null) {
  var gc_line = d3.svg.line()
         .x(function(d){ return x(d[0]+0.5); })
         .y(function(d){ return y(d[1]); })
         .interpolate("cardinal");

  gl = vis.append("g")
         .data([gc_time]);

  var da_line = gl.append("path")
         .attr("class", "gc_time")
         .attr("d", gc_line)
         .style("stroke", "rgba(0,0,0,.9)")
         .style("fill", "none");
}

var zoomed = true;
function update_y_scale() {
  var new_max_y = zoomed ? max_y : zoomed_max_y;
  zoomed = !zoomed;
  y.domain([0, new_max_y]).nice();
  redraw();
}

function redraw() {
  // Update
  draw_grid();

  vis.selectAll(".layer")
    .transition()
    .duration(zoom_interval)
    .attr("d", area);

  if (gc_time != null) {
    da_line.transition()
      .duration(zoom_interval)
      .attr("d", gc_line);
   };
}


})();
</script>
</div>

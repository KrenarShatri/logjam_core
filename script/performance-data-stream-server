#!/usr/bin/env ruby

$stdout.sync = true
$stderr.sync = true

$PROGRAM_NAME = "logjam-data-stream-server-#{ENV['RAILS_ENV'] || 'development'}"

require_relative '../../../config/boot'
require 'em-websocket'
require 'em-zeromq'
require 'set'

@perf_buffers = Hash.new{|h,k| h[k] = []}
@error_buffers = Hash.new{|h,k| h[k] = []}
@sockets = Hash.new{|h,k| h[k] = Set.new}
@anomaly_scores = Hash.new(0)
@bind_ip = ARGV[0] || "localhost"
@anomaly_host = ARGV[1] || "localhost"
@importer_host = ARGV[2] || "localhost"

@processed = 0

def log_info(message)
  puts "LJI[#{$$}] #{message}"
end

def log_error(message)
  $stderr.puts "LJE[#{$$}] #{message}"
end

def log_warn(message)
  $stderr.puts "LJW[#{$$}] #{message}"
end

def log_backtrace(e)
  log_error(e.backtrace[0..9].join("\nLJE[#{$$}] "))
end

def log_exception(e)
  log_error "#{e.class}(#{e})"
  log_backtrace e
end

def send_perf_data(ws, text)
  ws.send text
rescue => e
  log_exception e
  log_error text
end

def send_to_web_sockets(app_env_key, perf_data)
  @sockets[app_env_key].each {|s| send_perf_data(s, perf_data)}
rescue => e
  log_exception e
end

def handle_perf_data(app_env_key, perf_data, pub_socket)
  # puts app_env_key, perf_data
  metrics_payload = perf_data =~ /total_time/
  b = metrics_payload ? @perf_buffers[app_env_key] : @error_buffers[app_env_key]
  b << perf_data.force_encoding("UTF-8")
  b.shift if b.size > 60
  send_to_web_sockets(app_env_key, perf_data)
  if metrics_payload
    pub_socket.send_msg(app_env_key, perf_data)
    # log_error(perf_data) if app_env_key == "perlapp-production,all_pages"
  end
rescue => e
  log_exception e
ensure
  @processed += 1
end

def handle_anomaly_data(app_env_key, anomaly_data)
  send_to_web_sockets(app_env_key, anomaly_data)
rescue => e
  log_exception e
ensure
  @processed += 1
end

zmq_context = ZMQ::Context.new(1)

EM.run do
  context = EM::ZeroMQ::Context.new(zmq_context)

  sub_socket = context.socket(ZMQ::SUB)
  sub_socket.setsockopt(ZMQ::LINGER, 100)
  sub_socket.setsockopt(ZMQ::RCVHWM, 100000)
  sub_socket.connect("tcp://#{@importer_host}:9607")
  sub_socket.subscribe('')

  pub_socket = context.socket(ZMQ::PUB)
  pub_socket.setsockopt(ZMQ::LINGER, 100)
  pub_socket.setsockopt(ZMQ::SNDHWM, 100000)
  pub_socket.bind("tcp://#{@bind_ip}:9611")

  opad_socket = context.socket(ZMQ::SUB)
  opad_socket.setsockopt(ZMQ::LINGER, 100)
  opad_socket.setsockopt(ZMQ::RCVHWM, 100000)
  opad_socket.connect("tcp://#{@anomaly_host}:9610")
  opad_socket.subscribe('')

  sub_socket.on(:message) do |*parts|
    begin
      app_env_key = parts[0].copy_out_string
      perf_data   = parts[1].copy_out_string
      handle_perf_data(app_env_key, perf_data, pub_socket)
    rescue => e
      log_exception e
    ensure
      parts.each(&:close)
    end
  end

  opad_socket.on(:message) do |*parts|
    begin
      app_env_key  = parts[0].copy_out_string
      anomaly_data = parts[1].copy_out_string
      handle_anomaly_data(app_env_key, anomaly_data)
    rescue => e
      log_exception e
    ensure
      parts.each(&:close)
    end
  end

  EM.add_periodic_timer(5) do
    log_info "processed: #{@processed}"
    @processed = 0
  end

  web_socket_port = RUBY_PLATFORM =~ /darwin/ ? 9608 : 8080
  EM::WebSocket.start(:host => "0.0.0.0", :port => web_socket_port) do |ws|
    ws.onopen do
      log_info "web socket connection established: #{ws.object_id}"
    end

    ws.onclose do
      log_info "web socket connection closed: #{ws.object_id}"
      @sockets.each_value{|sockets| sockets.delete(ws) }
    end

    ws.onmessage do |app_env_key|
      @sockets[app_env_key] << ws
      @perf_buffers[app_env_key].each{|m| send_perf_data(ws, m)}
      @error_buffers[app_env_key].each{|m| send_perf_data(ws, m)}
      # send_perf_data(ws, @anomaly_scores[app_env_key])
      log_info "web socket subscribed to #{app_env_key}: #{ws.object_id}"
    end
  end
end

zmq_context.terminate

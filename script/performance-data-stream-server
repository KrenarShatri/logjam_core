#!/usr/bin/env ruby

$stdout.sync = true
$stderr.sync = true

require_relative '../../../config/boot'
require 'em-websocket'
require 'em-zeromq'
require 'set'

@perf_buffers = Hash.new{|h,k| h[k] = []}
@error_buffers = Hash.new{|h,k| h[k] = []}
@sockets = Hash.new{|h,k| h[k] = Set.new}

@processed = 0

def send_perf_data(ws, text)
  ws.send text
rescue => e
  $stderr.puts "#{e.class}(#{e})"
  $stderr.puts text
end

def send_to_web_sockets(app_env_key, perf_data)
  @sockets[app_env_key].each {|s| send_perf_data(s, perf_data)}
rescue => e
  $stderr.puts "#{e.class}(#{e})"
end

def handle_perf_data(app_env_key, perf_data, pub_socket)
  # puts app_env_key, perf_data
  metrics_payload = perf_data =~ /total_time/
  b = metrics_payload ? @perf_buffers[app_env_key] : @error_buffers[app_env_key]
  b << perf_data
  b.shift if b.size > 60
  send_to_web_sockets(app_env_key, perf_data)
  pub_socket.send_msg(app_env_key, perf_data)
rescue => e
  $stderr.puts "#{e.class}(#{e})"
ensure
  @processed += 1
end

zmq_context = ZMQ::Context.new(1)

EM.run do
  context = EM::ZeroMQ::Context.new(zmq_context)

  pull_socket = context.socket(ZMQ::PULL)
  pull_socket.setsockopt(ZMQ::LINGER, 100)
  pull_socket.setsockopt(ZMQ::RCVHWM, 1000)
  pull_socket.bind("tcp://0.0.0.0:9607")

  pub_socket = context.socket(ZMQ::PUB)
  pub_socket.setsockopt(ZMQ::LINGER, 100)
  pub_socket.setsockopt(ZMQ::SNDHWM, 1000)
  pub_socket.bind("tcp://0.0.0.0:9611")

  pull_socket.on(:message) do |*parts|
    begin
      app_env_key = parts[0].copy_out_string
      perf_data   = parts[1].copy_out_string
      handle_perf_data(app_env_key, perf_data, pub_socket)
    rescue => e
      $stderr.puts "#{e.class}(#{e})"
    ensure
      parts.each(&:close)
    end
  end

  EM.add_periodic_timer(5) do
    puts "processed: #{@processed}"
    @processed = 0
  end

  web_socket_port = RUBY_PLATFORM =~ /darwin/ ? 9608 : 8080
  EM::WebSocket.start(:host => "0.0.0.0", :port => web_socket_port) do |ws|
    ws.onopen do
      puts "web socket connection established: #{ws.object_id}"
    end

    ws.onclose do
      puts "web socket connection closed: #{ws.object_id}"
      @sockets.each_value{|sockets| sockets.delete(ws) }
    end

    ws.onmessage do |app_env_key|
      @sockets[app_env_key] << ws
      @perf_buffers[app_env_key].each{|m| send_perf_data(ws, m)}
      @error_buffers[app_env_key].each{|m| send_perf_data(ws, m)}
      puts "web socket subscribed to #{app_env_key}: #{ws.object_id}"
    end
  end
end

zmq_context.terminate

#!/usr/bin/env ruby

require_relative '../../../config/boot'
require 'optparse'
require 'amqp'
require 'oj'
require 'active_support'

options = {:app => "app", :env => "production", :keys => %w{all_pages jobs xws}}

OptionParser.new do |opt|
  opt.on("-a", "--app [APP]", "Name of the app") { |a| options[:app] = a }
  opt.on("-e", "--env [ENV]", "Name of the environment") { |e| options[:env] = e }
  opt.on("-k", "--keys [K1,K2,K3]", Array, "List of keys to generate data for") { |k| options[:keys] = k }
  opt.on("-v", "--verbose", "Be verbose") { |v| options[:verbose] = v }
  opt.parse!
end

FIELDS = %w(gc_time other_time memcache_time gearman_time search_time api_time db_time view_time total_time)

EM.run do
  connection = AMQP.connect(:host => "127.0.0.1")
  channel = AMQP::Channel.new(connection)
  exchange = channel.topic("logjam-performance-data-#{options[:app]}-#{options[:env]}")

  trap("INT"){ EM.next_tick { connection.close { EM.stop_event_loop} } }

  EM.add_periodic_timer(1) do
    options[:keys].each do |key|
      count = 50+450*rand()
      data = FIELDS.inject({"count" => count}){|h,k| h[k] = 100*rand*count; h}
      encoded_data = Oj.dump(data, :mode => :compat)
      # publish performance data
      exchange.publish(encoded_data, :key => key)
      puts "KEY: #{key} DATA: #{encoded_data}" if options[:verbose]
    end
  end
  error_count = 0
  EM.add_periodic_timer(3) do
    options[:keys].each do |key|
      errors =
        [
         {
           "severity" => 2 + rand(2),
           "time" => Time.now.utc.iso8601,
           "action" => "ApplicationController#index",
           "description" => "Something broke #{error_count+=1}"
         }
        ]
      encoded_errors = Oj.dump(errors, :mode => :compat)
      # publish error data
      exchange.publish(encoded_errors, :key => key)
      puts "KEY: #{key} ERROR: #{encoded_errors}" if options[:verbose]
    end
  end
end

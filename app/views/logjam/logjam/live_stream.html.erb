<div id="live-stream">
  <h2 id="stream-title">Live Performance Data Stream for <%= h @app %>-<%= h @env %>: <%= h @key %>
    <input id="stream-toggle" type="button" onclick="toggle_stream(this);" value="pause" />
  </h2>

  <script src="/js/swfobject.js"></script>
  <script src="/js/FABridge.js"></script>
  <script src="/js/web_socket.js"></script>
  <script type="text/javascript+protovis">

<% color_list = @resources.reverse.map{|r| Logjam::Resource.color(r,0.7)}+["rgba(128,128,128,0.3)"] %>
var resources = <%= raw @resources.reverse.to_json %>;
var colors = <%= raw color_list.to_json %>;
var connection_status = "disconnected";
var legend = <%= raw (@resources.reverse+%w(requests/second)).to_json.gsub(/_/,' ') %>;

/* Sizing and scales. */
var w = 600,
    h = 300,
    slice = 10,
    x = pv.Scale.linear(0, w).range(0, w),
    y = pv.Scale.linear(0, 0).range(0, h).nice(),
    y2 = pv.Scale.linear(0, 0).range(0, 50).nice(),
    color_map = pv.colors(colors);
    c = color_map.range();

/* Data */
function zeros(){ return pv.range(w/slice+1).map(function()0); }
var data = pv.range(resources.length).map(zeros);
var request_counts = zeros();

/* The root panel. */
var vis = new pv.Panel()
    .strokeStyle("#999")
    .right(30)
    .left(40)
    .top(5)
    .bottom(50)
    .width(w)
    .height(h);

function connection_status_color() {
  switch(connection_status) {
  case 'connected'   : return "rgba(123,128,128,.5)";
  case 'connecting'  : return "rgba(0,128,128,.5)";
  case 'disconnected': return "rgba(123,0,0,.5)";
  default            : return "black";
  }
}

/* Connection status. */
vis.add(pv.Label)
    .top(2)
    .left(2)
    .font("bold 14px sans-serif")
    .textStyle(connection_status_color)
    .textAlign("left")
    .textBaseline("top")
    .text(function() connection_status);

/* X-axis and ticks. */
vis.add(pv.Rule)
    .data(x.ticks(w/slice))
    .left(x)
    .bottom(0)
    .strokeStyle(function(d) d ? "rgba(128,128,128,.2)" : "#999")
  .anchor("bottom").add(pv.Label)
    .visible(function(d) d && ((d/slice)%10==0))
    .text(function(d) "t-"+ x.tickFormat(d/slice-60));

/* Y-label */
vis.add(pv.Label)
    .left(-30)
    .bottom(h/2)
    .font("12px sans-serif")
    .textStyle("#999")
    .textAlign("center")
    .textBaseline("middle")
    .textAngle(-Math.PI / 2)
    .text("Response time (ms)");

/* Y-axis and ticks. */
vis.add(pv.Rule)
    .data(function() y.ticks(10))
    .bottom(function(d) y(d))
    .strokeStyle(function(d) d ? "rgba(128,128,128,.2)" : "#999")
  .anchor("left").add(pv.Label)
    .text(y.tickFormat);

/* The stack layout. */
vis.add(pv.Layout.Stack)
    .layers(data)
    .x(function() this.index*slice)
    .y(function(d) y(d))
  .layer.add(pv.Area)
    .interpolate("cardinal")
    .fillStyle(function(d) c[this.parent.index])
    .strokeStyle(function(d) c[this.parent.index].darker(0.1))
;

/* Request counts. */
vis.add(pv.Area)
    .data(request_counts)
    .left(function() this.index*slice)
    .bottom(h-50)
    .height(function(d) y2(d))
    .interpolate("cardinal")
    .fillStyle("rgba(128,128,128,0.3)")
    .strokeStyle("rgba(128,128,128,0.3)");

vis.add(pv.Label)
    .data([0,25,50])
    .bottom(function() h-50+this.index*25)
    .right(0)
    .text(function(d) y2.invert(d))
    .textAlign("left")
    .textBaseline("middle")
;

/* Legend. */
vis.add(pv.Dot)
    .data(legend)
    .left(function() 10+(100*(Math.floor(this.index/2))))
    .bottom(function() -20-14*(this.index%2))
    .lineWidth(1)
    .size(16)
    .strokeStyle(color_map)
    .fillStyle(color_map)
    .add(pv.Label)
       .textBaseline("middle")
       .textMargin(7)
       .text(function() legend[this.index]);

/* recompute the Y-scale. */
function re_scale() {
  var max_y = 0;
  var num_areas = data.length;
  var num_slots = data[0].length;
  for (var i = 0; i < num_slots; ++i) {
    sum_slot = 0;
    for (var j = 0; j < num_areas; ++j) sum_slot += data[j][i];
    if (sum_slot > max_y) max_y = sum_slot;
  };
  y = pv.Scale.linear(0, max_y).range(0, h).nice();
  y2 = pv.Scale.linear(0, pv.max(request_counts)).range(0, 50).nice();
};

/* add stream data to the chart */
function update_chart(values) {
  var count = values["count"];
  request_counts.push(count);
  request_counts.shift();
  for (var i = 0, len = resources.length; i < len; ++i) {
    var val = values[resources[i]];
    if (count == 0 || val == null)
      val = 0;
    else
      val /= count;
    data[i].push(val);
    data[i].shift();
  };
  re_scale();
  vis.render();
};

/* severity lables */
function severity_label(i) {
  switch(i) {
  case 1: return "INFO";
  case 2: return "WARN";
  case 3: return "ERROR";
  case 4: return "FATAL";
  default: return "UNKNOWN";
  }
};

function error_url(request_id, time) {
  var date = time.slice(0,10).replace(/-/g,'/');
  return '<%= Logjam.base_url %>/' + date + '/show/' + request_id + '?app=<%= @app %>' + '&env=<%= @env %>';
};

/* add errors to the recent errors list */
function update_errors(errors) {
  var table = jQuery('#recent-errors');
  var list = jQuery('#recent-errors-head');
  for (var i = 0, len = errors.length; i < len; ++i) {
    var e = errors[i];
    var severity = severity_label(e["severity"]);
    var action = e["action"];
    var time = e["time"].slice(11,19);
    var desc = e["description"];
    var url = error_url(e["request_id"], e["time"]);
    var new_row = jQuery("<tr class='full_stats'><td>" + severity + "</td><td>" + time + "</td><td>" + action + "</td><td>" + desc + "</td></tr>");
    new_row.hide().addClass("new_error clickable");
    var onclick = (function(u){ return function(){ window.open(u, "_blank"); }})(url);
    new_row.children().click(onclick);
    var rows = jQuery('#recent-errors tr');
    var l = rows.size() - 20;
    for (j=0; j < l; ++j) {
      rows.last().remove();
    }
    new_row.removeAttr("style"); /* firefox bug */
    list.after(new_row);
    remove_color = function(row) { return function() {
                     window.setTimeout(function() { row.removeClass("new_error"); } , 10000); }; };
    new_row.fadeIn(2000, remove_color(new_row) );
  }
};

/* update chart or error list */
function update_view(value) {
  if (jQuery.isArray(value))
    update_errors(value);
  else
    update_chart(value);
};

/* The web socket */
var ws = null;

function reconnect(){
  var button = jQuery('#stream-toggle')
  if ( button.val() == "pause") {
     connection_status = "connecting";
     vis.render();
     window.setTimeout(connect_chart, 5000);
  }
};


/* connect to the data stream */
function connect_chart() {
  if ( ws == null ) {
    var Socket = "MozWebSocket" in window ? MozWebSocket : WebSocket;
    ws = new Socket("<%= @socket_url %>");
    ws.onmessage = function(evt) { update_view(JSON.parse(evt.data)); };
    ws.onclose = function() { connection_status = "disconnected"; vis.render(); ws = null; reconnect(); };
    ws.onopen = function() { connection_status = "connected"; vis.render(); ws.send('<%= "#{@app}-#{@env},#{@key}" %>'); };
    ws.onerror = function() { alert("websocket error"); }
  }
};

/* disconnect from the data stream */
function disconnect_chart() {
  ws.close();
  ws = null;
}

/* toggle stream conection */
function toggle_stream(button) {
  if (button.value == "resume") {
    button.value = "pause";
    connect_chart();
  } else {
    button.value = "resume";
    disconnect_chart();
  }
}

/* intial draw */
re_scale();
vis.render();

/* automatically connect to the data stream when the ducoment is ready */
jQuery(document).ready(connect_chart);

  </script>

  <h2>Recent Warnings/Errors</h2>
  <table id="recent-errors" class="full_stats">
  <tr id="recent-errors-head"><th>Severity</th><th>Time</th><th>Action</th><th>Log Excerpt</th></tr>
  </table>

</div>
